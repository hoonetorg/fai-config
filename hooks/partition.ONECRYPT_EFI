#!/usr/bin/env -S python3 -u
import logging

import os
from pathlib import Path
import sys
import subprocess
import shlex
from typing import Any

import json
import time


def subprocess_run_wrapper(cmd: str, dryrun: bool = False, **kwargs) -> subprocess.CompletedProcess | None:
    if kwargs.get("shell"):
        wcmd = cmd
    else:
        wcmd = shlex.split(cmd)

    if dryrun:
        logging.info(f"[DRYRUN] {cmd}")
        return None

    logging.info(f"[EXECUTING] {cmd}")
    return subprocess.run(wcmd, **kwargs)

def write_ks_snippets(diskpath: str):
    # Persist the disk identifier without newline
    with open('/tmp/disk-id', 'w') as f:
        f.write(diskpath)
    
    # Generate partitions.ks Kickstart fragment
    partitions_ks = f"""
    ignoredisk --only-use={diskpath}
    part /boot/efi --fstype="efi" --onpart={diskpath}-part1 --fsoptions="umask=0077,shortname=winnt"
    part btrfs.2 --fstype="btrfs" --onpart={diskpath}-part2
    part btrfs.3 --fstype="btrfs" --onpart={diskpath}-part3 --encrypted --luks-version=luks2
    
    btrfs /boot --label=fedora_boot --data=single btrfs.2
    btrfs none --label=fedora_fedora --data=single btrfs.3
    
    btrfs / --subvol --name=root fedora_fedora
    btrfs /var --subvol --name=var fedora_fedora
    btrfs /home --subvol --name=home fedora_fedora
    """
    with open('/tmp/partitions.ks', 'w') as f:
        f.write(partitions_ks)
    
    # Debug output for partitions.ks
    logging.info(f"Generated /tmp/partitions.ks:\n{partitions_ks}")

def get_diskinfo(diskpath: str, dryrun: bool = False) -> Any:
    # Gather disk info via lsblk
    try:
        result = subprocess_run_wrapper(
            cmd=(
               "lsblk --bytes -Jo "
               "DISK-SEQ,NAME,KNAME,PKNAME,PATH,ID-LINK,SCHED,SIZE,START,PTTYPE,"
               "TYPE,PARTN,PARTTYPE,PARTTYPENAME,PARTFLAGS,PARTLABEL,FSTYPE,"
               "FSROOTS,MOUNTPOINTS "
               f"{shlex.quote(diskpath)}"
            ),
            dryrun=dryrun,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True
        )

        if dryrun or result is None:
            return None

        raw = result.stdout
        logging.info(f"Raw lsblk output:\n{raw}")
    except subprocess.CalledProcessError as err:
        logging.error(f"lsblk failed: {err.stderr}")
        sys.exit(1)
    
    # Parse JSON
    logging.info(f"Parsed JSON:")
    try:
        data = json.loads(raw)
        logging.info(f"JSON loads lsblk output:\n{json.dumps(data, indent=2)}")
    except json.JSONDecodeError as err:
        logging.error(f"Failed to parse JSON: {err}")
        sys.exit(1)
    
    # Check if blockdevice
    blockdevices = data.get("blockdevices")

    if not blockdevices:
        logging.error(f"No blockdevices entry for {diskpath}")
        return blockdevices
    if len(blockdevices) != 1:
        logging.error(f"Expected exactly one blockdevice entry for {diskpath}, found {len(blockdevices)}")
        return False

    logging.info(f"Found blockdevices entry for {diskpath}")
    return blockdevices[0]

def check_should_partition(diskpath: str, diskinfo: dict ) -> bool:
    
    # Check if disk
    disktype = diskinfo.get("type")
    if disktype != "disk":
        logging.error(f"{diskpath} is type={disktype}, not a disk")
        sys.exit(1)
    
    logging.info(f"{diskpath} is confirmed as a whole disk.")
    
    should_partition = False
    
    # Check for existing partition table
    diskpttype = diskinfo.get("pttype")
    if diskpttype:
        logging.info(f"{diskpath} has existing partition table type '{diskpttype}'; skipping partitioning")
        should_partition = False
    else:
      # No partition table
      logging.info(f"{diskpath} has no partition table, partition table type is '{diskpttype}'.")
    
    
      # Further check for a filesystem directly on the disk
      disk_fstype = diskinfo.get("fstype")
      if disk_fstype:
          logging.info(f"{diskpath} has existing filesystem '{disk_fstype}'; skipping partitioning")
          should_partition = False
      else:
          logging.info(f"No filesystem detected on {diskpath}")
          # This is the only condition where we do partitioning - no partition table and no FS
          should_partition = True
    
    # Furhter check for existing partitions - should only be True when disk has partition table
    if diskinfo.get("children"):
        should_partition = False
    else:
        logging.info(f"{diskpath} has no partitions.")

    return should_partition

def do_device_settle(dryrun: bool = False):
    # Wait for udev to settle
    for ucmd in ['trigger', 'settle']:
        subprocess_run_wrapper(cmd=f"udevadm {shlex.quote(ucmd)}", dryrun=dryrun)
        time.sleep(5)
    
    
def do_wipeparts(diskpath: str, diskinfo: dict, wipeparts: list, dryrun: bool = False) -> bool:
    diskid_link = diskinfo.get('id-link')
    diskparts = diskinfo.get("children")
    diskpttype = diskinfo.get("pttype")
    if  diskparts:
        # If GPT exists or partitions exist, wipe partitions defined in wipeparts
        if diskpttype in [ 'gpt' ] and diskparts:
            for p in diskparts:
                partid_link = p.get("id-link")
                partnumber = p.get("partno") or p.get("partn")
                partpath = f"/dev/disk/by-id/{partid_link}"
                logging.info(f"{diskpath} has existing partition: {partpath}")
                #if partid_link in [f"{diskid_link}-part{i}" for i in wipeparts]:
                if partnumber and (int(partnumber) in wipeparts):
                    subprocess_run_wrapper(cmd=f"wipefs --force --all {shlex.quote(partpath)}", dryrun=dryrun)
            logging.info(f"signatures wiped on parts {wipeparts} wiped.")
    
        subprocess_run_wrapper(cmd=f"partprobe {shlex.quote(diskpath)}", dryrun=dryrun)
        do_device_settle(dryrun=dryrun)

def do_partition(diskpath: str, root_end_mib: int, dryrun: bool = False):
    # Disk is valid and empty â€“ now partition it
    logging.info(f"Partitioning {diskpath}")
    subprocess_run_wrapper(cmd=(
        "parted --script "
        f"{shlex.quote(diskpath)} "
        "unit MiB "
        "mklabel gpt "
        "mkpart primary 1 2048 "
        "mkpart primary 2048 4096 "
        f"mkpart primary 4096 {shlex.quote(str(root_end_mib))} "
        "set 1 boot on "
        "set 1 esp on "
        "set 2 bls_boot on "
        f"name 1 {shlex.quote("'EFI System Partition'")} "
        f"name 2 {shlex.quote("''")} "
        f"name 3 {shlex.quote("''")}"
        ),
        dryrun=dryrun)

    do_device_settle(dryrun=dryrun)

    # Show free space after partitioning
    logging.info(f"Current partition layout (free space):")
    subprocess_run_wrapper(cmd=(
        "parted --script "
        f"{shlex.quote(diskpath)} "
        "unit MiB print free"
        ),
        dryrun=dryrun)

def do_cryptsetup(partition: str, cryptpassword: str, dryrun: bool = False) -> str:
 
    password=(cryptpassword + "\n").encode()
    subprocess_run_wrapper(cmd=(
        "cryptsetup luksFormat " 
        "--type luks2 " 
        "--batch-mode "
        "-c aes-xts-plain64 "
        "-s 512 "
        "-h sha512 "
        "-i 5000 "
        "--use-random "
        "--align-payload 2048 "
        f"{shlex.quote(partition)}" 
        ),
        dryrun=dryrun,
        input=password,
        check=True
    )

    do_device_settle(dryrun=dryrun)

    result = subprocess_run_wrapper(
        cmd=f"blkid -s UUID -o value {shlex.quote(partition)}",
        dryrun=dryrun,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=True
        )

    if dryrun or result is None:
        return None

    uuid = result.stdout.strip()

    subprocess_run_wrapper(cmd=(
        "cryptsetup open " 
        "--type luks2 " 
        "--batch-mode "
        "--allow-discards "
        f"{shlex.quote(partition)} " 
        f"luks-{shlex.quote(uuid)}"
        ), 
        dryrun=dryrun,
        input=password,
        check=True
    )

    do_device_settle(dryrun=dryrun)
 
    logging.info(f"Created LUKS device on {partition} with UUID {uuid} and opened it as luks-{uuid}")

    return uuid


def do_mkfs(part: str, parttype: str, dryrun: bool = False) -> str:
    match parttype:
        case 'EFI':
            subprocess_run_wrapper(cmd=f"mkfs.vfat -F 32 {shlex.quote(part)}", dryrun=dryrun)
        case 'btrfs':
            subprocess_run_wrapper(cmd=f"mkfs.btrfs -d single -m dup {shlex.quote(part)}", dryrun=dryrun)
        case _:
            logging.error(f"Unsupported parttype {parttype} - exiting")
            sys.exit(1)

    result = subprocess_run_wrapper(
        cmd=f"blkid -s UUID -o value {shlex.quote(part)}",
        dryrun=dryrun,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=True
        )

    if dryrun or result is None:
        return None

    uuid = result.stdout.strip()

    logging.info(f"Formatted partition {part} as {parttype} with UUID {uuid}")

    return uuid

def do_btrfs_subvols(part: str, subvolumes: list, dryrun: bool = False):
    mountpoint = "/btrfs"
    logging.info(f"Mounting {part} at {mountpoint}")
    os.makedirs(mountpoint, exist_ok=True)
    subprocess_run_wrapper(cmd=f"mount -o rw,subvolid=5,compress=zstd:1,discard=async {shlex.quote(part)} {shlex.quote(mountpoint)}", dryrun=dryrun)
    try:
        for sub in subvolumes:
            path = os.path.join(mountpoint, sub)
            logging.info(f"Creating btrfs subvolume {path}")
            subprocess_run_wrapper(cmd=f"btrfs subvolume create {shlex.quote(path)}", dryrun=dryrun)
    finally:
        logging.info(f"Unmounting {mountpoint}")
        subprocess_run_wrapper(cmd=f"umount {shlex.quote(mountpoint)}", dryrun=dryrun)
        os.rmdir(mountpoint)


def do_write_disk_var_sh(esppart: str, bootpart: str, rootpart: str, bootdev: str):
    disk_var_sh = os.path.join(os.environ['LOGDIR'], "disk_var.sh")
    with open(disk_var_sh, "w") as f:
        f.write(f'ESP_DEVICE="{esppart}"\n')
        f.write(f'BOOT_PARTITION="{bootpart}"\n')
        f.write(f'ROOT_PARTITION="{rootpart}"\n')
        f.write(f'SWAPLIST=""\n')
        f.write(f'BOOT_DEVICE="{bootdev}"\n')
        f.write(f'PHYSICAL_BOOT_DEVICES="{bootdev}"\n')

def do_write_crypttab(crypt_uuids: list):
    crypttab = os.path.join(os.environ['LOGDIR'], "crypttab")
    for crypt_uuid in crypt_uuids: 
        with open(crypttab, "w") as f:
            f.write(f'luks-{crypt_uuid} UUID={crypt_uuid} none luks,discard\n')


def do_write_fstab(efi_uuid: str, boot_uuid: str, root_uuid: str):
    fstab = os.path.join(os.environ['LOGDIR'], "fstab")
    with open(fstab, "w") as f:
        f.write(f"UUID={root_uuid} /         btrfs   rw,subvol=os,compress=zstd:1,x-systemd.device-timeout=0,discard=async 0 1\n")
        f.write(f"UUID={boot_uuid} /boot    btrfs   rw,subvol=boot,compress=zstd:1,x-systemd.device-timeout=0,discard=async  0 2\n")
        f.write(f"UUID={efi_uuid} /boot/efi vfat    rw,discard             0 2\n")

def do_setup_storage(diskpath: str, dryrun: bool = False):
    crypt_root_uuid = do_cryptsetup(partition=f"{diskpath}-part3", cryptpassword="hoonetorg", dryrun=dryrun)

    efi_uuid = do_mkfs(part=f"{diskpath}-part1", parttype="EFI", dryrun=dryrun)
    boot_uuid = do_mkfs(part=f"{diskpath}-part2", parttype="btrfs", dryrun=dryrun)
    root_uuid = do_mkfs(part=f"/dev/mapper/luks-{crypt_root_uuid}", parttype="btrfs", dryrun=dryrun)

    do_btrfs_subvols(part=f"{diskpath}-part2", subvolumes=[ 'boot' ], dryrun=dryrun)
    do_btrfs_subvols(part=f"/dev/mapper/luks-{crypt_root_uuid}", subvolumes=[ 'os' ], dryrun=dryrun)

    do_write_disk_var_sh(esppart=f"{diskpath}-part1", bootpart=f"{diskpath}-part2", rootpart=f"/dev/mapper/luks-{crypt_root_uuid}", bootdev=f"{diskpath}")

    do_write_crypttab(crypt_uuids=[ crypt_root_uuid ])

    do_write_fstab(efi_uuid=efi_uuid, boot_uuid=boot_uuid, root_uuid=root_uuid)


def main():
    dryrun = False
    logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

    ks = os.path.isdir("/usr/share/anaconda")
    fai = os.path.isdir("/var/lib/fai")
    if ks and fai:
        logging.error(f"Found both Anaconda dir and FAI dir - can only be either or")
        sys.exit(1)

    #diskpath = "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi0-0-0-0"
    #rootsizemib = 20480
    diskpath = os.environ["DISKPATH"]
    rootsizemib = int(os.environ["ROOTSIZEMIB"])
    root_end_mib = 2048 + 2048 + rootsizemib # efi size + boot size + rootsizemib
    wipeparts = [ 1, 2, 3 ]

    diskinfo = get_diskinfo(diskpath=diskpath, dryrun=dryrun)

    if not diskinfo:
        logging.error(f"Couldn't get diskinfo {diskpath}")
        sys.exit(1)

    should_partition = check_should_partition(diskpath=diskpath, diskinfo=diskinfo)

    if diskinfo.get("children"):
        wiped = do_wipeparts(diskpath=diskpath, diskinfo=diskinfo, wipeparts=wipeparts, dryrun=dryrun)

    if should_partition:
        do_partition(diskpath=diskpath, root_end_mib=root_end_mib, dryrun=dryrun)
    else:
        logging.info(f"Partitioning skipped.")
    
    if ks:
        write_ks_snippets(diskpath=diskpath)
    elif fai:
        do_setup_storage(diskpath, dryrun=dryrun)
        subprocess_run_wrapper(cmd=f"skiptask partition", dryrun=dryrun, shell=True, executable="/bin/bash", check=True)

if __name__ == "__main__":
    main()
